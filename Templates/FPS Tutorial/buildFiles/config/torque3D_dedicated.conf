<?php
        
    /// Prefs
    addProjectDefine( 'TORQUE_SHADERGEN' );
    addProjectDefine( 'TORQUE_UNICODE' );
    addProjectDefine( 'TORQUE_SHARED' );
    addProjectDefine( 'TORQUE_DEDICATED' );

    /// For OPCODE
    addProjectDefine( 'BAN_OPCODE_AUTOLINK' );
    addProjectDefine( 'ICE_NO_DLL' );
    addProjectDefine( 'TORQUE_OPCODE' );
    
    // Additional includes
    addIncludePath( "../../game/shaders" );
    
    addLibIncludePath( "lmng" );
    addLibIncludePath( "lpng" );
    addLibIncludePath( "ljpeg" );
    addLibIncludePath( "lungif" );
    addLibIncludePath( "zlib" );
    addLibIncludePath( "tinyxml" );
    addLibIncludePath( "opcode" );
    addLibIncludePath( "libvorbis/include" );
    addLibIncludePath( "libogg/include" );
    addLibIncludePath( "libtheora/include" );
    addLibIncludePath( "squish" );

    // Modules
    includeModule( 'Torque3D' );
    includeModule( 'core' );
    includeModule( 'T3D' );
    includeModule( 'vorbis' );
    includeModule( 'theora' );
    
    includeModule( 'collada' );
   
    // Dependencies
    addProjectDependency( 'lmng' );
    addProjectDependency( 'lpng' );
    addProjectDependency( 'lungif' );
    addProjectDependency( 'ljpeg' );
    addProjectDependency( 'zlib' );
    addProjectDependency( 'tinyxml' );
    
    addProjectDependency( 'opcode' );
    addProjectDependency( 'libvorbis' );
    addProjectDependency( 'libogg' );
    addProjectDependency( 'libtheora' );
    addProjectDependency( 'squish' );
    addProjectDependency( 'pcre' );
    addProjectDependency( 'collada_dom' );
    

    if ( Generator::$platform == "mac" )
    {    
        addProjectDefine( '__MACOSX__' );
        addProjectDefine( 'LTM_DESC' );
    }


    if (Generator::$platform == "win32")
    {
        setProjectModuleDefinitionFile('../../' . getLibSrcDir() . 'Torque3D/msvc/torque3d.def');

        addProjectDefine( 'UNICODE' );
        addProjectDefine( 'INITGUID' );

        addProjectLibInput('COMCTL32.LIB');
        addProjectLibInput('COMDLG32.LIB');
        addProjectLibInput('USER32.LIB');
        addProjectLibInput('ADVAPI32.LIB');
        addProjectLibInput('GDI32.LIB');
        addProjectLibInput('WINMM.LIB');
        addProjectLibInput('WSOCK32.LIB');
        addProjectLibInput('vfw32.lib');
        addProjectLibInput('Imm32.lib');
        addProjectLibInput('d3d9.lib');
        addProjectLibInput('d3dx9.lib');
        addProjectLibInput('dxerr9.lib');
        addProjectLibInput('ole32.lib');
        addProjectLibInput('shell32.lib');
        addProjectLibInput('oleaut32.lib');
        addProjectLibInput('version.lib');
    }

?>
